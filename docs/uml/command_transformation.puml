@startuml Command Transformation

partition "api.py" {
    (*) --> "Receive HTTP request"
    --> "Parse arguments from HTTP request (url and/or body)"

    --> "Map object/system/profile CRUD function to Spark commands"
    note right
        Example: POST /spark/objects requires a CREATE_OBJECT command,
        and a data store create
    end note


    partition "device.py" {
        --> "Convert sid to nid"
        note right
            The controller assigns numeric IDs (nid) to Blocks.
            For usability, the Block is exported with a user-changable string ID (sid).
            Here the string ID is converted to the numeric ID known to the controller.

            An exception is raised if no numeric ID could be found.
        end note

        partition "codec.py (encode)" {
            --> "Encode block data"
            note right
                Convert a dict of arguments to Protobuf-encoded bytes.
                Some data types require a pre-processing step.

                An example is OneWireBus:
                Protobuf decodes its 'address' field (bytes) as base64 strings.
                Brewblox wants them displayed to the user as hexadecimal strings.
                This hex <-> base64 conversion is done in a preprocessing step in encode().
            end note
        }

        partition "commander.py" {
            --> "Build Command"
            note right
                Construct is responsible for converting the command arguments to bytes.

                Note: according to construct, block data already is 'bytes'.
            end note

            --> "Send Command, match with reply"

            --> "Parse Command"
            note right
                The symmetrical opposite of "Build Command".
                Converts from bytes to a dict of arguments.

                Block data still is a 'bytes' object here.
            end note
        }

        partition "codec.py (decode)" {
            --> "Decode block data"
            note right
                Symmetrical opposite of "Encode block data"
            end note
        }

        --> "Add sid to block"
        note right
            Looks up a string ID that matches the numeric ID.
            The resulting object will contain both nid and sid.

            When it comes to IDs, the controller is considered the source of truth.
            If no string ID can be found, one is created, and saved to data store.
        end note
    }

    --> "Return HTTP request"

}

@enduml